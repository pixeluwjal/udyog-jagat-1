// app/api/referrer/dashboard-summary/route.ts
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import ReferralCodeModel from '@/models/ReferralCode';
import User from '@/models/User'; // To populate referrer username
import jwt from 'jsonwebtoken';
import { headers } from 'next/headers';

// Define a type for the decoded JWT token for better type safety
interface DecodedToken {
    id: string;
    email: string;
    role: string;
    // Add any other properties that might be in your JWT payload
}

const JWT_SECRET = process.env.JWT_SECRET;

async function verifyReferrer(requestHeaders: Headers): Promise<{ user: DecodedToken | null, error: string | null }> {
    const authorization = requestHeaders.get('authorization');
    if (!authorization?.startsWith('Bearer ')) {
        return { user: null, error: 'Unauthorized - No token provided or invalid format.' };
    }

    const token = authorization.split(' ')[1];
    if (!token) {
        return { user: null, error: 'Unauthorized - Token missing.' };
    }

    if (!JWT_SECRET) {
        console.error('API: JWT_SECRET is not defined in environment variables. Server configuration error.');
        return { user: null, error: 'Server configuration error: JWT secret missing.' };
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET) as DecodedToken;
        if (decoded.role !== 'job_referrer') {
            return { user: null, error: 'Forbidden - Only job referrers can access this data.' };
        }
        return { user: decoded, error: null };
    } catch (err: unknown) {
        let errorMessage = 'Unauthorized - Invalid token.';
        if (err instanceof Error) {
            errorMessage = `Unauthorized - Invalid token: ${err.message}`;
        }
        return { user: null, error: errorMessage };
    }
}

export async function GET(request: Request) {
    await dbConnect();
    console.log('\n--- API: /api/referrer/dashboard-summary GET - Request received ---');

    const { user: referrerUser, error: authError } = await verifyReferrer(headers());
    if (authError) {
        console.warn(`API: Dashboard summary fetch failed: ${authError}`);
        return NextResponse.json({ error: authError }, { status: 401 });
    }

    if (!referrerUser?.id) {
        console.error('API: Referrer user ID is missing after authentication.');
        return NextResponse.json({ error: 'Referrer user ID not available.' }, { status: 500 });
    }

    try {
        // Fetch all referral codes generated by this specific referrer
        const allReferralCodes = await ReferralCodeModel.find({ generatedByAdminId: referrerUser.id })
            .sort({ createdAt: -1 }) // Sort by newest first
            .populate({
                path: 'generatedByAdminId',
                select: 'username' // Populate the username of the referrer
            })
            .lean(); // Use .lean() for performance

        const totalReferrals = allReferralCodes.length;

        // Prepare recent referrals for display on the dashboard
        // Limit to, for example, the last 5 recent referrals
        const recentReferrals = allReferralCodes.slice(0, 5).map(code => ({
            id: code._id.toString(),
            candidateName: code.candidateEmail.split('@')[0], // Default to part of email if no name
            candidateEmail: code.candidateEmail,
            referredOn: code.createdAt.toISOString(),
            referralCode: code.code,
        }));

        console.log(`API: Successfully fetched dashboard summary for referrer ID: ${referrerUser.id}. Total: ${totalReferrals}`);

        return NextResponse.json({
            totalReferrals,
            recentReferrals,
        }, { status: 200 });

    } catch (error: unknown) {
        console.error('API: Error fetching referrer dashboard summary:', error);
        let errorMessage = 'Failed to fetch dashboard summary.';
        if (error instanceof Error) {
            errorMessage = `Failed to fetch dashboard summary: ${error.message}`;
        }
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}
